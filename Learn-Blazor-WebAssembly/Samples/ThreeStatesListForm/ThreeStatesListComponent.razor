@using System.Collections.Immutable

<FluentLabel>Please select your favorite fruits.</FluentLabel>
<FluentStack Style="margin: 20px;" Orientation="Orientation.Vertical">
    <FluentCheckbox Label="@($"All ({AreAllTypesVisible?.ToString() ?? "null"})")"
                    ThreeState="true"
                    ShowIndeterminate="false"
                    @bind-CheckState="AreAllTypesVisible" />
    @foreach (string resourceType in _allFruits)
    {
        bool isChecked = _selectedFruits.Contains(resourceType);
        <FluentCheckbox Label="@($"{resourceType} ({isChecked})")"
                        @bind-Value:get="isChecked"
                        @bind-Value:set="c => OnResourceTypeVisibilityChanged(resourceType, c)" />
    }
</FluentStack>


@code {

    private readonly List<string> _allFruits = ["Amao Strawberry", "Ponkan Orange", "Cheyenne Muscat"];

    [CascadingParameter]
    protected List<string> _selectedFruits { get; set; }

    public ThreeStatesListComponent()
    {
        _selectedFruits = new List<string>(_allFruits);
    }

    protected void OnResourceTypeVisibilityChanged(string resourceType, bool isVisible)
    {
        if (isVisible)
        {
            _selectedFruits.Add(resourceType);
        }
        else
        {
            _selectedFruits.Remove(resourceType);
        }
    }

    private bool? AreAllTypesVisible
    {
        get
        {
            return _selectedFruits.Count == _allFruits.Count
                ? true
                : _selectedFruits.Count == 0
                    ? false
                    : null;
        }
        set
        {
            if (value is true)
            {
                _selectedFruits = _allFruits;
            }
            else if (value is false)
            {
                _selectedFruits.Clear();
            }
        }
    }
}
